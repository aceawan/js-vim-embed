{
  "name": "js-vim-command",
  "version": "0.0.0",
  "description": "Vim command parser",
  "main": "index.js",
  "dependencies": {
    "chai": "~1.6.1"
  },
  "devDependencies": {},
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/itsjoesullivan/vim-command-parser.git"
  },
  "author": {
    "name": "Joe Sullivan"
  },
  "license": "BSD",
  "readmeFilename": "readme.md",
  "gitHead": "9d3d765461ec8efffe0bcfe6af34d8ab7495b058",
  "readme": "#Vim Command Parser\n\nVim's commands are powerful. This library is meant to parse those that fit a general syntax of:\n\n\t[count][operator][count][motion]\n\nAs defined in [vim docs](http://vimdoc.sourceforge.net/htmldoc/intro.html#notation)\n\n##Usage\n\nvar Parser = require('vim-command-parser'),\n\tparser = new Parser();\n\n##Format\n\nInput: command string\n\n```javascript\nparser.parse('c3fa')\n```\n\nOutput: object\n\n```javascript\n{\n\tdescription: '{operator}{count}{motion}',\n\tvalue: ['c', 3, 'fa']\n}\n```\n\nWhy is this useful? Imagine implementing the actual commands like so:\n\n```javascript\n//Define command handlers\nvar commands = {\n\t'{count}{motion}': function(count, motion) {\n\t\twhile(ct--) this.exec(motion);\n\t}\n};\n```\n\n```javascript\n//Use the parser to map keystrokes to handlers\nvar keyBuffer = '';\nvim.on('key', function(key) {\n\tkeyBuffer += key;\n\tvar command = parser.parse(keyBuffer);\n\tif(command.description in commands) commands[command.description].apply(vim,command.value\n});\n```\n\n\n##TODO:\n\n- Registers\n\n\n",
  "_id": "js-vim-command@0.0.0",
  "_from": "js-vim-command@*"
}
